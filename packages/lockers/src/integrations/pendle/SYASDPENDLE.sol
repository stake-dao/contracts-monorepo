// SPDX-License-Identifier: BUSL-1.1
pragma solidity 0.8.28;

import {PendleERC4626SYV2} from "@pendle/v2-sy/StandardizedYield/implementations/PendleERC4626SYV2.sol";
import {PendleLocker} from "@address-book/src/PendleEthereum.sol";
import {IASDPendle} from "src/interfaces/IASDPendle.sol";

/// @title SY-asdPENDLE – Pendle Standardized Yield Adapter for asdPENDLE
/// @notice
///  - This contract enables asdPENDLE (auto-compounding sdPENDLE vault token from AladdinDAO/Stake DAO)
///    to be used in the Pendle Protocol.
///  - Users can deposit sdPENDLE, or asdPENDLE and receive SYASDPENDLE, which can be strip
///    into Principal Tokens (PT) and Yield Tokens (YT) for yield trading.
///  - At maturity, PT can be redeemed for the value of asdPENDLE in sdPENDLE; YT entitles holders to all yield generated by
///    asdPENDLE until maturity.
///  - All yield is auto-compounded into asdPENDLE; there are no extra rewards to claim via this contract.
///  - Redemptions can be made to either asdPENDLE (vault share token) or sdPENDLE (underlying asset).
///  - asdPENDLE is the asset of this contract, SYASDPENDLE is the share.
///
/// @dev
///  - This is an ERC-5115 wrapped yield-bearing tokens compliant contract
///  - Relies on the ERC-4626 compliance and transferability of asdPENDLE.
///  - Assumes asdPENDLE’s strategy auto-compounds all rewards into sdPENDLE.
///  - The value of PT at maturity is determined by the asdPENDLE:sdPENDLE exchange rate at that time.
///  - No custom claimRewards logic is implemented, as all yield is auto-compounded.
///  - Set infinite approvals for all supported tokens.
///
/// | Token             | Role/Meaning                                          |
/// |-------------------|-------------------------------------------------------|
/// | sdPENDLE          | Underlying asset (principal)                          |
/// | asdPENDLE         | Yield-bearing vault token (auto-compounds sdPENDLE)   |
/// | SY-asdPENDLE      | Pendle-compatible wrapper for asdPENDLE               |
/// | PT-asdPENDLE      | Principal Token (redeemable for sdPENDLE at maturity) |
/// | YT-asdPENDLE      | Yield Token (entitles holder to yield until maturity) |
///
/// @author StakeDAO
/// @custom:contact contact@stakedao.org
contract SYASDPENDLE is PendleERC4626SYV2 {
    address public constant SDPENDLE = PendleLocker.SDTOKEN;
    IASDPendle public constant ASDPENDLE = IASDPendle(PendleLocker.ASDTOKEN);

    /// @notice Initialize the SY contract
    /// @dev The name and the token of the SY contract are hardcoded in the function.
    ///      This function give infinite approval on the SDPENDLE and ASDPENDLE tokens to the SY contract
    constructor() PendleERC4626SYV2("Standardized Yield asdPENDLE", "SY-asdPENDLE", PendleLocker.ASDTOKEN) {
        _safeApproveInf(SDPENDLE, address(ASDPENDLE));
    }

    /// @dev Transfer sdPENDLE/asdPENDLE tokens into the asdPENDLE vault.
    /// @param tokenIn The token address used to mint shares
    /// @param amountDeposited The amount of tokens deposited
    /// @return amountSharesOut The amount of shares minted
    function _deposit(address tokenIn, uint256 amountDeposited) internal override returns (uint256 amountSharesOut) {
        if (tokenIn == address(ASDPENDLE)) amountSharesOut = amountDeposited;
        else if (tokenIn == SDPENDLE) amountSharesOut = ASDPENDLE.deposit(amountDeposited, address(this));
    }

    /// @dev Interact with the asdPENDLE contract to preview the incoming deposit
    /// @param tokenIn The token address used to mint shares
    /// @param amountTokenToDeposit The amount of tokens deposited
    /// @return amountSharesOut The amount of shares minted
    function _previewDeposit(address tokenIn, uint256 amountTokenToDeposit)
        internal
        view
        override
        returns (uint256 amountSharesOut)
    {
        if (tokenIn == SDPENDLE) amountSharesOut = ASDPENDLE.previewDeposit(amountTokenToDeposit);
        else if (tokenIn == address(ASDPENDLE)) amountSharesOut = amountTokenToDeposit;
    }

    /// @dev Transfer the shares to the receiver
    ///      If the tokenOut is sdPENDLE, call the `redeem` function of the asdPENDLE contract.
    ///      If the tokenOut is asdPENDLE, transfer the shares directly to the receiver.
    /// @param receiver The address to receive the shares
    /// @param tokenOut The token address used to redeem shares
    /// @param amountSharesToRedeem The amount of shares to redeem
    /// @return amountTokenOut The amount of tokens redeemed
    function _redeem(address receiver, address tokenOut, uint256 amountSharesToRedeem)
        internal
        virtual
        override
        returns (uint256 amountTokenOut)
    {
        if (tokenOut == SDPENDLE) {
            return ASDPENDLE.redeem(amountSharesToRedeem, receiver, address(this));
        } else if (tokenOut == address(ASDPENDLE)) {
            amountTokenOut = amountSharesToRedeem;
            _transferOut(tokenOut, receiver, amountTokenOut);
        }
    }

    /// @dev Interact with the asdPENDLE contract to preview the outgoing redemption
    /// @param tokenOut The token address used to redeem shares
    /// @param amountSharesToRedeem The amount of shares to redeem
    /// @return amountTokenOut The amount of tokens redeemed
    function _previewRedeem(address tokenOut, uint256 amountSharesToRedeem)
        internal
        view
        override
        returns (uint256 amountTokenOut)
    {
        if (tokenOut == SDPENDLE) return ASDPENDLE.previewRedeem(amountSharesToRedeem);
        else if (tokenOut == address(ASDPENDLE)) return amountSharesToRedeem;
    }

    /// @notice Get the current exchange rate in the asdPENDLE contract
    /// @dev This function hardcode the correct `asdPENDLE` decimals value which is 18.
    ///      If you update or inherit this contract, be aware of this function.
    /// @return The exchange rate of the SY contract
    function exchangeRate() public view virtual override returns (uint256) {
        return ASDPENDLE.convertToAssets(1e18);
    }

    //////////////////////////////////////////////////////
    // --- HELPERS & GETTERS
    //////////////////////////////////////////////////////

    /// @notice Returns the list of all input tokens that can be used to deposit into the SY contract.
    /// @return res The list of input tokens.
    function getTokensIn() public pure override returns (address[] memory res) {
        res = new address[](2);
        res[0] = SDPENDLE;
        res[1] = address(ASDPENDLE);
        return res;
    }

    /// @notice Returns the list of all output tokens that can be redeemed from the SY contract.
    /// @return res The list of output tokens.
    function getTokensOut() public pure override returns (address[] memory res) {
        res = new address[](2);
        res[0] = address(ASDPENDLE);
        res[1] = SDPENDLE;
        return res;
    }

    /// @notice Returns true if the token is a valid input token for the SY contract.
    /// @param token The token to check.
    /// @return True if the token is a valid input token, false otherwise.
    function isValidTokenIn(address token) public pure override returns (bool) {
        return token == address(ASDPENDLE) || token == SDPENDLE;
    }

    /// @notice Returns true if the token is a valid output token for the SY contract.
    /// @param token The token to check.
    /// @return True if the token is a valid output token, false otherwise.
    function isValidTokenOut(address token) public pure override returns (bool) {
        return token == SDPENDLE || token == address(ASDPENDLE);
    }

    /// @notice This function contains information to interpret what the asset is
    /// @return assetType the type of the asset
    ///         - 0 for ERC20 tokens
    ///         - 1 for AMM liquidity tokens
    ///         - 2 for bridged yield bearing tokens like wstETH, rETH on Arbi whose the underlying
    ///           asset doesn't exist on the chain
    /// @return assetAddress the address of the asset
    /// @return assetDecimals the decimals of the asset
    function assetInfo()
        external
        view
        override
        returns (AssetType assetType, address assetAddress, uint8 assetDecimals)
    {
        return (AssetType.TOKEN, address(ASDPENDLE), ASDPENDLE.decimals());
    }
}
